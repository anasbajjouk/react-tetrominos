{"version":3,"sources":["img/bg.png","gameHelpers.js","hooks/useStage.js","tetrominos.js","hooks/usePlayer.js","components/styles/styledCell.js","components/Cell/Cell.js","components/styles/StyledStage.js","components/Stage/Stage.js","components/styles/StyledDisplay.js","components/Display/Display.js","components/styles/StyledStartButton.js","components/StartButton/StartButton.js","components/styles/StyledTetris.js","components/Tetris/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","acc","findIndex","prev","unshift","push","sweepRows","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","Math","floor","random","usePlayer","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","prevState","clonedPlayer","JSON","parse","stringify","offset","StyledCell","styled","div","props","type","React","memo","StyledStage","height","width","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","StyledTetrisWrapper","bgImage","StyledTetris","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99aa5333.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y++) {\r\n    for (let x = 0; x < player.tetromino.length; x++) {\r\n      //1. Check that we are on an actual Tetromino cell\r\n      //2. Check that our move is inside the game areas height(y)\r\n      //3.Check that our move is inside the game areas width(x)\r\n      //4.Check that the cell we are moving to isn't set to clear\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          !stage[y + player.pos.y + moveY] ||\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            \"clear\"\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { createStage } from \"../gameHelpers\";\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((acc, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          acc.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\r\n          return acc;\r\n        }\r\n        acc.push(row);\r\n        return acc;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      //First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\r\n      );\r\n\r\n      //Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? \"merged\" : \"clear\"}`\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      //Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    setStage(prev => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","export const TETROMINOS = {\r\n  0: { shape: [[0]], color: \"0, 0, 0\" },\r\n  I: {\r\n    shape: [\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0],\r\n      [0, \"I\", 0, 0]\r\n    ],\r\n    color: \"80, 227, 230\"\r\n  },\r\n  J: {\r\n    shape: [\r\n      [0, \"J\", 0],\r\n      [0, \"J\", 0],\r\n      [\"J\", \"J\", 0]\r\n    ],\r\n    color: \"36, 95, 223\"\r\n  },\r\n  L: {\r\n    shape: [\r\n      [0, \"L\", 0],\r\n      [0, \"L\", 0],\r\n      [0, \"L\", \"L\"]\r\n    ],\r\n    color: \"223, 173, 36\"\r\n  },\r\n  O: {\r\n    shape: [\r\n      [\"O\", \"O\"],\r\n      [\"O\", \"O\"]\r\n    ],\r\n    color: \"223, 217, 36\"\r\n  },\r\n  S: {\r\n    shape: [\r\n      [0, \"S\", \"S\"],\r\n      [\"S\", \"S\", 0],\r\n      [0, 0, 0]\r\n    ],\r\n    color: \"48, 211, 56\"\r\n  },\r\n  T: {\r\n    shape: [\r\n      [0, 0, 0],\r\n      [\"T\", \"T\", \"T\"],\r\n      [0, \"T\", 0]\r\n    ],\r\n    color: \"132, 61, 198\"\r\n  },\r\n  Z: {\r\n    shape: [\r\n      [\"Z\", \"Z\", 0],\r\n      [0, \"Z\", \"Z\"],\r\n      [0, 0, \"Z\"]\r\n    ],\r\n    color: \"227, 78, 78\"\r\n  }\r\n};\r\n\r\nexport const randomTetromino = () => {\r\n  const tetrominos = \"IJLOSTZ\";\r\n  const randomTetromino =\r\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    \r\n  return TETROMINOS[randomTetromino];\r\n};\r\n","import { useState, useCallback } from \"react\";\r\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\r\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    //Make the rows to become cols\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map(col => col[index])\r\n    );\r\n    //Reverse each row to get a rotated matrix\r\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n\r\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prevState => ({\r\n      ...prevState,\r\n      pos: { x: (prevState.pos.x += x), y: (prevState.pos.y += y) },\r\n      collided\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false\r\n    });\r\n  }, []);\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledCell = styled.div`\r\n  width: auto;\r\n  background: rgba(${props => props.color}, 0.8);\r\n  border: ${props => (props.type === 0 ? \"0px\" : \"4px solid\")};\r\n  border-bottom-color: rgba(${props => props.color}, 0.1);\r\n  border-right-color: rgba(${props => props.color}, 1);\r\n  border-top-color: rgba(${props => props.color}, 1);\r\n  border-left-color: rgba(${props => props.color}, 0.3);\r\n`;\r\n","import React from \"react\";\r\nimport { StyledCell } from \"../styles/styledCell\";\r\nimport { TETROMINOS } from \"../../tetrominos\";\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color} />\r\n);\r\n\r\nexport default React.memo(Cell);\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    calc(25vw / ${props => props.width})\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  width: 100%;\r\n  max-width: 25vw;\r\n  background: #111;\r\n`;\r\n","import React from \"react\";\r\nimport Cell from \"../Cell/Cell\";\r\nimport { StyledStage } from \"../styles/StyledStage\";\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map(row => row.map((cell, x) => <Cell type={cell[0]} key={x} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDisplay = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 0 0 20px 0;\r\n  padding: 20px;\r\n  border: 4px solid #333;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  color: ${props => (props.gameOver ? \"red\" : \"#999\")};\r\n  background: #000;\r\n  font-family: VT323, Arial, Helvetica, sans-serif;\r\n  font-size: 0.8rem;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledDisplay } from \"../styles/StyledDisplay\";\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n);\r\n\r\nexport default Display;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.button`\r\n  margin: 0 0 20px auto;\r\n  padding: 20px;\r\n  min-height: 30px;\r\n  width: 100%;\r\n  border-radius: 20px;\r\n  border: none;\r\n  color: white;\r\n  background: #333;\r\n  font-size: 1rem;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledStartButton } from \"../styles/StyledStartButton\";\r\n\r\nconst StartButton = ({ callback }) => (\r\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n);\r\n\r\nexport default StartButton;\r\n","import styled from \"styled-components\";\r\n\r\nimport bgImage from \"../../img/bg.png\";\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(${bgImage}) #000;\r\n  background-size: cover;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 40px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\r\n\r\n//Custom Hooks\r\nimport { useInterval } from \"../../hooks/useInterval\";\r\nimport { useStage } from \"../../hooks/useStage\";\r\nimport { usePlayer } from \"../../hooks/usePlayer\";\r\nimport { useGameStatus } from \"../../hooks/useGameStatus\";\r\n\r\n//Components\r\nimport Stage from \"../Stage/Stage\";\r\nimport Display from \"../Display/Display\";\r\nimport StartButton from \"../StartButton/StartButton\";\r\nimport { createStage, checkCollision } from \"../../gameHelpers\";\r\n\r\nimport { StyledTetrisWrapper, StyledTetris } from \"../styles/StyledTetris\";\r\n\r\nconst Tetris = ({ callback }) => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 }))\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n  };\r\n\r\n  const startGame = () => {\r\n    //reset everything\r\n    setStage(createStage());\r\n    setDropTime(500);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n  };\r\n\r\n  const drop = () => {\r\n    //Increase level when player has cleared 10 rows\r\n    if (rows > level + 1 - 10) {\r\n      setLevel(prev => prev + 1);\r\n      //also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      //GameOver\r\n      if (player.pos.y < 1) {\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1) + 200);\r\n      }\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  const linePoints = [40, 100, 300, 1200];\r\n\r\n  const calcScore = useCallback(() => {\r\n    //We have score\r\n    if (rowsCleared > 0) {\r\n      //This is how original Tetris score is calculated\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, linePoints, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport Tetris from \"./components/Tetris/Tetris\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tetris />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}